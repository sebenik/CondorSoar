#!/bin/bash

USAGE="Usage: make_user_stats < hour | day | week | month | year | from (mon) (day) (year) to (mon) (day) (year) filename >"

LENGTH="-last$1"

case $1 in
	day)
		LABELNAME="Day"
		FILENAME="Day_"
		MINTOEXPIRE=60
		;;
	week)
		LABELNAME="Week"
		FILENAME="Week_"
		MINTOEXPIRE=420
		;;
	month)
		MINTOEXPIRE=1440
		case $2 in 
			[1-9]|1[0-2])
				THISMONTH="$2" ;;
			*)
				THISMONTH=`date +%m` ;;
		esac
		THENEXTMONTH=`echo "$THISMONTH + 1" | bc`
		THISYEAR=`date +%Y`
		TOYEAR=$THISYEAR
		if [ "$THENEXTMONTH" = "13" ]
			then
				TOYEAR=`echo "$THISYEAR + 1" | bc`
				THENEXTMONTH=1
		fi
		OUTFILE=`date -d "$THISMONTH/01" +%b`
		# echo "CALLING: make_user_stats from $THISMONTH 1 $THISYEAR to $THENEXTMONTH 1 $TOYEAR $OUTFILE"
		eval "./make_user_stats from $THISMONTH 1 $THISYEAR to $THENEXTMONTH 1 $TOYEAR Month$OUTFILE"
		LABELNAME="MonthCurrent"
		FILENAME="Month_Current"
		;;
	year)
		if [ -n "$2" ]
		then
			THISYEAR=$2
		else
			THISYEAR=`date +%Y`
		fi
		TOYEAR=`echo "$THISYEAR + 1" | bc`
		OUTFILE="Year_"$THISYEAR
		eval "./make_user_stats from 1 1 $THISYEAR to 1 1 $TOYEAR $OUTFILE"
		exit
		;;
	hour)
		MINTOEXPIRE=15
		LENGTH="-lasthours 1"
		LABELNAME="Hour"
		FILENAME="Hour_"
		;;
	from)
		MINTOEXPIRE=525600
		if [ $# != 9 -o $5 != "to" ]
			then
				echo $USAGE
				exit 1
		fi
		FROMMON=$2
		FROMDAY=$3
		FROMYEAR=$4
		TOMON=$6
		TODAY=$7
		TOYEAR=$8
		LENGTH="-from $2 $3 $4 -to $6 $7 $8"
		LABELNAME=$9
		FILENAME=$9
		;;
	*)
		echo $USAGE
		exit 1
		;;
esac

RESGROUPS=`condor_stats -pool $POOL $LENGTH -usergrouplist 2>/dev/null`
if [ "$RESGROUPS" = "No Data." -o $? = "1" ]
	then
		exit 0
fi

# Get RESGROUPS again, but sort it this time. Make certain TOTAL is first.
# Also grep out any bizarrely formed names.
RESGROUPS=`condor_stats -pool $POOL $LENGTH -usergrouplist | grep -v '[^a-zA-Z01-9\.\@\%\_\-]' | grep -v Total | sort`
RESGROUPS="Total $RESGROUPS"

DATAFILENAME=$FILENAME-`date +%m%d%y%H%M%S`

touch /tmp/cvw.$$
STATFILE="/tmp/vwstats.$$"
HEADER="FORMAT"
for group in $RESGROUPS
do
	condor_stats -pool $POOL $LENGTH -orgformat -usergroupquery $group >> /tmp/cvw.$$
	HEADER="$HEADER $group JobsRunning JobsIdle"
done


#echo `echo $HEADER | sed 's/\//-/g'` > $1.$$
(echo $STATFILE; cat /tmp/cvw.$$) | gawk \
'BEGIN { SEP=" A "; numarch=0 }
{ if ( NR == 1 ) {
      statfile = $1
  } else {
  if ( arch != $2 ) {
      alltimes[$1]=1
	  arch=$2
	  archnames[numarch]=arch
	  numarch++
	  for (atime in alltimes) {
         archdata[arch SEP atime]="0,0"
	  }
	  lasttime=0
  }
  alltimes[$1]=1
  archdata[arch SEP $1]         = sprintf("%d,%d",$4,$5)
  archdata_running[arch SEP $1] = sprintf("%d",$4)
  archdata_idle[arch SEP $1]    = sprintf("%d",$5)
  if ( lasttime > 0 ) {
  	  total = $4 + $5
	  secs = $1 - lasttime
	  if ( (secs - lastsecs > 120) && (lastsecs != 0) ) {
	  	total = 0
	  }
	  lastsecs = secs
	  if ( total > 0 ) {
         archavetot[arch] += secs #kok sekund skupaj
		 ownerper = ($4 / total) * 100 #procent running mašin
		 claimedper = ($5 / total) * 100
	     archrawowner[arch] += $4 * secs #kok sekund running skupaj na vseh mašinah
	     archrawclaimed[arch] += $5 * secs
	     archaveowner[arch] += ownerper * secs #sekunde skupaj na running mašinah
	     archaveclaimed[arch] += claimedper * secs
		 if ( archrawpeakowner[arch] < $4 ) {
		    archrawpeakowner[arch] = $4
		 }
		 if ( archrawpeakclaimed[arch] < $5 ) {
		    archrawpeakclaimed[arch] = $5
		 }
		 if ( archpeakowner[arch] < ownerper ) {
		    archpeakowner[arch] = ownerper
		 }
		 if ( archpeakclaimed[arch] < claimedper ) {
		    archpeakclaimed[arch] = claimedper
		 }
	  }
  }
  lasttime=$1
  }
}
END { 
  statTime = systime()
  table = ""
  for (i=0; i<numarch; i++) {
  	 j=archnames[i]
	 if ( archavetot[j] > 0 ) {
		 hoursused = archrawowner[j] / 3600
		 ownerraw = archrawowner[j] / archavetot[j] #povprečno število running mašin
		 claimedraw = archrawclaimed[j] / archavetot[j]
		 ownerp = archaveowner[j] / archavetot[j]
		 claimedp = archaveclaimed[j] / archavetot[j]
		 shadecount++
		 if ( shadecount % 2 < 0.5 ) {
			class = "class=\\\"even\\\""
		 } else {
			class = "class=\\\"odd\\\""
		 }
		 split(j,arr,"@")
		 table = table sprintf("<tr %s><td><a href=javascript:chartM.updateChart(\\\"%s\\\");>%s<\\/a>",class, j, arr[1])
		 table = table sprintf("<br><font size=-1>%s<\\/font><\\/td><td align=center>%.1f<\\/td><td align=center>%.1f<br>(%.1f%%)<\\/td>", arr[2], hoursused, ownerraw, ownerp)
		 table = table sprintf("<td align=center>%.1f<br>(%.1f%%)<\\/td><td align=center>%.1f<br>(%.1f%%)<\\/td><td align=center>%.1f<br>(%.1f%%)<\\/td><\\/tr>", claimedraw, claimedp, archrawpeakowner[j], archpeakowner[j], archrawpeakclaimed[j], archpeakclaimed[j])

		 printf"<tr %s><td><a href=javascript:chartM.updateChart(\"%s\");>%s</a>",class, j, arr[1] > statfile
		 printf"<br><font size=-1>%s</font></td><td align=center>%.1f</td><td align=center>%.1f<br>(%.1f%%)</td>", arr[2], hoursused, ownerraw, ownerp  > statfile
		 printf"<td align=center>%.1f<br>(%.1f%%)</td><td align=center>%.1f<br>(%.1f%%)</td><td align=center>%.1f<br>(%.1f%%)</td></tr>\n", claimedraw, claimedp, archrawpeakowner[j], archpeakowner[j], archrawpeakclaimed[j], archpeakclaimed[j] > statfile
	 }

	 j_misc[i] = sprintf("\"misc\":{\"user\":\"%s\",\"hused\":%.1f,\"jra\":%.1f,\"jrap\":%.1f,\"jia\":%.1f,\"jiap\":%.1f,\"jrp\":%.1f,\"jrpp\":%.1f,\"jip\":%.1f,\"jipp\":%.1f}", j,hoursused,ownerraw,ownerp,claimedraw,claimedp,archrawpeakowner[j],archpeakowner[j],archrawpeakclaimed[j],archpeakclaimed[j])
  }

  	j_chartConstols = "\"chartControls\":\"<div id=\\\"controlsLeft\\\">Display series as:<form id=\\\"form_series_display\\\"><input type=\\\"radio\\\" name=\\\"stacked\\\" id=\\\"rbs_yes\\\" value=\\\"Stacked\\\" checked onclick=\\\"chartM.updateChart()\\\" /><label for=\\\"rbs_yes\\\" id=\\\"lbl_stacked\\\" class=\\\"rb_label\\\">Stacked</label><input type=\\\"radio\\\" name=\\\"stacked\\\" id=\\\"rbs_no\\\" value=\\\"Unstacked\\\" onclick=\\\"chartM.updateChart()\\\"/><label for=\\\"rbs_no\\\" id=\\\"lbl_unstacked\\\" class=\\\"rb_label\\\">Unstacked</label></form></div><div id=\\\"controlsRight\\\">Series:<form id=\\\"form_series\\\"><input type=\\\"checkbox\\\" name=\\\"to\\\" id=\\\"cb_jobsRunning\\\" value=\\\"running\\\" checked onclick=\\\"chartM.updateChart()\\\" /><label for=\\\"cb_jobsRunning\\\" class=\\\"checkbox\\\" id=\\\"lbl_jobsRunning\\\">Total Jobs Running</label><input type=\\\"checkbox\\\" name=\\\"to\\\" id=\\\"cb_jobsIdle\\\" value=\\\"idle\\\" checked onclick=\\\"chartM.updateChart()\\\" /><label for=\\\"cb_jobsIdle\\\" class=\\\"checkbox\\\" id=\\\"lbl_jobsIdle\\\">Total Jobs Idle</label></form></div>\""

	j_table = "\"table\":\"<table cellspacing=\\\"0\\\" cellpadding=\\\"0\\\"><thead><tr><td>User</td><td>Total Allocation Time (Hours)</td><td>JobsRunning Average</td><td>JobsIdle Average</td><td>JobsRunning Peak</td><td>JobsIdle Peak</td></tr></thead>" table "<\\/table>\""


  	for (atime in alltimes) {
		times[atime] = atime;
	}
	n = asort(times);

	j_time = "\"time\":["
	for (i = 1; i <= n; i++) {
		j_time = j_time times[i] ","
	}
	j_time = substr(j_time, 0, length(j_time)-1)
	j_time = j_time "]"

	j_user = "\"arch\":{ "
	for (i=0; i<numarch; i++) {
		if ( archavetot[archnames[i]] > 0 ) {
			j_user = j_user "\"" archnames[i] "\":{\"series\":["
			j_running = "{\"uid\":\"" archnames[i] "_r\",\"name\":\"Total Jobs Running\",\"data\":["
			j_idle = "{\"uid\":\"" archnames[i] "_i\",\"name\":\"Total Jobs Idle\",\"data\":["
	
	  		for (j = 1; j<=n; j++) {
				if(archnames[i] SEP times[j] in archdata_running)
					j_running = j_running archdata_running[archnames[i] SEP times[j]] ","
				else
					j_running = j_running "null,"
	
				if(archnames[i] SEP times[j] in archdata_idle)
					j_idle = j_idle archdata_idle[archnames[i] SEP times[j]] ","
				else
					j_idle = j_idle "null,"
			}
	
			j_running = substr(j_running, 0, length(j_running)-1) "]}"
			j_idle = substr(j_idle, 0, length(j_idle)-1) "]}"
	
			j_user = j_user j_running "," j_idle "]," j_misc[i]
			j_user = j_user "},"
		}
	}
	j_user = substr(j_user, 0, length(j_user)-1)
	j_user = j_user "}"

	j_statTime = "\"statTime\":" statTime

	json = "{" j_statTime "," j_time "," j_user "," j_chartConstols "," j_table "}"
	printf"%s",json
}' - >> $1.$$

rm -f /tmp/cvw.$$

DATAFOLDER=./data/user/
mv -f $DATAFOLDER$FILENAME*.data $DATAFOLDER$FILENAME.data.old 1> /dev/null 2>&1
mv -f $1.$$ $DATAFOLDER$DATAFILENAME.data

chmod 644 $DATAFOLDER$DATAFILENAME.data


EXPIRE=`perl addtime.pl $MINTOEXPIRE 2>/dev/null`
if [ $? = "1" ]
	then
		EXPIRE="!Expire cannot be computed without Perl"
	else
		EXPIRE=`echo 'META HTTP-EQUIV="Expires" CONTENT="'$EXPIRE'"'`
fi

(sed s/PERIOD/"$LABELNAME"/g ./html/header-user-html.html | \
 sed s/DATAFILENAME/"$DATAFILENAME"/ | \
 sed s/\!Expire/"$EXPIRE"/ ; cat $STATFILE; 
 sed s/PERIOD/"$LABELNAME"/g ./html/footer-user-html.html | \
 sed s/ARCH/"Total"/ ) > $1.html.$$
rm -f $STATFILE

mv -f ./html/$FILENAME.html ./html/$FILENAME.html.old > /dev/null 2>&1
mv -f $1.html.$$ ./html/$FILENAME.html

chmod 644 ./html/$FILENAME.html
