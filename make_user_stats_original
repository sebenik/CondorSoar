#!/bin/sh

USAGE="Usage: make_user_stats < hour | day | week | month | from (mon) (day) (year) to (mon) (day) (year) filename >"

LENGTH="-last$1"

case $1 in
	day)
		DATARESOLUTION=0
		LABELNAME="Day"
		FILENAME="UserDay"
		MINTOEXPIRE=60
		;;
	week)
		DATARESOLUTION=8
		LABELNAME="Week"
		FILENAME="UserWeek"
		MINTOEXPIRE=420
		;;
	month)
		MINTOEXPIRE=1440
		THISMONTH=`date +%m`
		THENEXTMONTH=`echo "$THISMONTH + 1" | bc`
		THISYEAR=`date +%Y`
		TOYEAR=$THISYEAR
		if [ "$THENEXTMONTH" = "13" ]
			then
				TOYEAR=`echo "$THISYEAR + 1" | bc`
				THENEXTMONTH=1
		fi
		OUTFILE=`date +%b`
		# echo "CALLING: make_user_stats from $THISMONTH 1 $THISYEAR to $THENEXTMONTH 1 $TOYEAR $OUTFILE"
		eval "./make_user_stats from $THISMONTH 1 $THISYEAR to $THENEXTMONTH 1 $TOYEAR $OUTFILE"
		DATARESOLUTION=4
		LABELNAME="Month"
		FILENAME="UserMonth"
		;;
	hour)
		MINTOEXPIRE=15
		DATARESOLUTION=0
		LENGTH="-lasthours 1"
		LABELNAME="Hour"
		FILENAME="UserHour"
		;;
	from)
		MINTOEXPIRE=525600
		if [ $# != 9 -o $5 != "to" ]
			then
				echo $USAGE
				exit 1
		fi
		DATARESOLUTION=4
		FROMMON=$2
		FROMDAY=$3
		FROMYEAR=$4
		TOMON=$6
		TODAY=$7
		TOYEAR=$8
		LENGTH="-from $2 $3 $4 -to $6 $7 $8"
		LABELNAME=$9
		FILENAME="User$9"
		;;
	*)
		echo $USAGE
		exit 1
		;;
esac

RESGROUPS=`condor_stats -pool $POOL $LENGTH -usergrouplist 2>/dev/null`
if [ "$RESGROUPS" = "No Data." -o $? = "1" ]
	then
		exit 0
fi

# Get RESGROUPS again, but sort it this time. Make certain TOTAL is first.
# Also grep out any bizarrely formed names.
RESGROUPS=`condor_stats -pool $POOL $LENGTH -usergrouplist | grep -v '[^a-zA-Z01-9\.\@\%\_\-]' | grep -v Total | sort`
RESGROUPS="Total $RESGROUPS"

DATAFILENAME=$FILENAME-`date +%m%d%y%H%M%S`

touch /tmp/cvw.$$
STATFILE="/tmp/vwstats.$$"
HEADER="FORMAT"
for group in $RESGROUPS
do
	condor_stats -pool $POOL $LENGTH -orgformat -usergroupquery $group >> /tmp/cvw.$$
	HEADER="$HEADER $group JobsRunning JobsIdle"
done


echo `echo $HEADER | sed 's/\//-/g'` > $1.$$
(echo $STATFILE; cat /tmp/cvw.$$) | awk \
'BEGIN { SEP=" A "; numarch=0 }
{ if ( NR == 1 ) {
      statfile = $1
  } else {
  if ( arch != $2 ) {
      alltimes[$1]=1
	  arch=$2
	  archnames[numarch]=arch
	  numarch++
	  for (atime in alltimes) {
         archdata[arch SEP atime]="0,0"
	  }
	  lasttime=0
  }
  alltimes[$1]=1
  archdata[arch SEP $1]=sprintf("%d,%d",$4,$5)
  if ( lasttime > 0 ) {
  	  total = $4 + $5
	  secs = $1 - lasttime
	  if ( (secs - lastsecs > 120) && (lastsecs != 0) ) {
	  	total = 0
	  }
	  lastsecs = secs
	  if ( total > 0 ) {
         archavetot[arch] += secs
		 ownerper = ($4 / total) * 100
		 claimedper = ($5 / total) * 100
	     archrawowner[arch] += $4 * secs
	     archrawclaimed[arch] += $5 * secs
	     archaveowner[arch] += ownerper * secs
	     archaveclaimed[arch] += claimedper * secs
		 if ( archrawpeakowner[arch] < $4 ) {
		    archrawpeakowner[arch] = $4
		 }
		 if ( archrawpeakclaimed[arch] < $5 ) {
		    archrawpeakclaimed[arch] = $5
		 }
		 if ( archpeakowner[arch] < ownerper ) {
		    archpeakowner[arch] = ownerper
		 }
		 if ( archpeakclaimed[arch] < claimedper ) {
		    archpeakclaimed[arch] = claimedper
		 }
	  }
  }
  lasttime=$1
  }
}
END { 
  for (i=0; i<numarch; i++) {
  	 j=archnames[i]
	 if ( archavetot[j] > 0 ) {
	 hoursused = archrawowner[j] / 3600
	 ownerraw = archrawowner[j] / archavetot[j]
	 claimedraw = archrawclaimed[j] / archavetot[j]
	 ownerp = archaveowner[j] / archavetot[j]
	 claimedp = archaveclaimed[j] / archavetot[j]
	 shadecount++
	 if ( shadecount % 2 < 0.5 ) {
	    shade=" "
	 } else {
	    shade="bgcolor=#DDDDDD"
	 }
	 split(j,arr,"@")
	 printf"<tr %s><td><b><a href=javascript:set_graphs(\"%s\");>%s</a>",shade, j, arr[1] > statfile
	 printf"</b><br><font size=-1>%s</font></td><td align=center>%.1f</td><td align=center>%.1f<br>(%.1f%%)</td>", arr[2], hoursused, ownerraw, ownerp  > statfile
	 printf"<td align=center>%.1f<br>(%.1f%%)</td><td align=center>%.1f<br>(%.1f%%)</td><td align=center>%.1f<br>(%.1f%%)</td></tr>\n", claimedraw, claimedp, archrawpeakowner[j], archpeakowner[j], archrawpeakclaimed[j], archpeakclaimed[j] > statfile
	 }
  }
  for (atime in alltimes) {
	 printf"%s",atime
	 for (i = 0; i < numarch; i++) {
		printf" %s",archdata[archnames[i] SEP atime]
	 }
	 printf"\n"
  }
}' - | sort -n +0 -1 | (echo $DATARESOLUTION; cat -) | awk \
'{ if ( NR == 1 ) {
    resolution=$1
  } else {
    if ( resolution > 0 ) {
      if ( NR % resolution == 0 ) {
	    print $0 
      }
    } else {
	  print $0
	}
  }
}' - >> $1.$$

rm -f /tmp/cvw.$$

mv -f $FILENAME*.data $FILENAME.data.old 1> /dev/null 2>&1
mv -f $1.$$ $DATAFILENAME.data

chmod 644 $DATAFILENAME.data


EXPIRE=`perl addtime.pl $MINTOEXPIRE 2>/dev/null`
if [ $? = "1" ]
	then
		EXPIRE="!Expire cannot be computed without Perl"
	else
		EXPIRE=`echo 'META HTTP-EQUIV="Expires" CONTENT="'$EXPIRE'"'`
fi

(sed s/PERIOD/"$LABELNAME"/g header-user-html.html | \
 sed s/DATAFILENAME/"$DATAFILENAME"/ | \
 sed s/\!Expire/"$EXPIRE"/ ; cat $STATFILE; 
 sed s/PERIOD/"$LABELNAME"/g footer-user-html.html) > $1.html.$$
rm -f $STATFILE

mv -f $FILENAME.html $FILENAME.html.old > /dev/null 2>&1
mv -f $1.html.$$ $FILENAME.html

chmod 644 $FILENAME.html
